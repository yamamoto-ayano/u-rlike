generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String   @id @default(uuid())
  username    String   @unique
  email       String   @unique
  password    String
  // ★拡張性のポイント: 認証タイプを追加
  authType  String   @default("local") // "local" または "oauth"
  // ★拡張性のポイント: OAuth関連のフィールド
  provider  String?  // OAuth提供元（後にOAuthを追加する場合）
  providerId String? // OAuth提供元でのユーザーID
  
  // リレーション
  tokens    Token[]
  // ★拡張性のポイント: OAuth関連のリレーション（後で追加）
  // authorizationCodes AuthorizationCode[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Token {
  id           String   @id @default(uuid())
  accessToken  String   @unique
  refreshToken String?  @unique // ★拡張性のポイント: OAuthでは必須
  
  // ★拡張性のポイント: OAuthクライアント関連（後で必須になる）
  clientId     String?
  // client      Client?  @relation(fields: [clientId], references: [id])
  
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// ★拡張性のポイント: 後でOAuthに必要なモデルを追加できるようにコメントとして記載
/*
model Client {
  id           String   @id @default(uuid())
  name         String
  clientId     String   @unique
  clientSecret String
  redirectUri  String
  tokens       Token[]
  // authorizationCodes AuthorizationCode[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model AuthorizationCode {
  id          String   @id @default(uuid())
  code        String   @unique
  clientId    String
  // client      Client   @relation(fields: [clientId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  redirectUri String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}
*/

model History {
  id          String   @id @default(uuid())
  url         String
  title       String
  description String
  image       String?
  createdAt   DateTime @default(now())
  checked     Boolean  @default(false)
}

model BookmarkFolder {
  id          String     @id @default(uuid())
  name        String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  bookmarks   Bookmark[]
  edges       Edges[]
}

model Bookmark {
  id          String         @id @default(uuid())
  url         String
  title       String
  description String
  image       String?
  memo        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  folder      BookmarkFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String
  BookmarkSource  Edges[] @relation("BookmarkSource")
  BookmarkTarget  Edges[] @relation("BookmarkTarget")
  positionx     Int?
  positiony     Int?
}

model Edges {
  id         String   @id @default(uuid())
  sourceId   String
  targetId   String
  source     Bookmark @relation("BookmarkSource", fields: [sourceId], references: [id], onDelete: Cascade)
  target     Bookmark @relation("BookmarkTarget", fields: [targetId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  folder     BookmarkFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId   String
  type       String
  memo       String
}

model Like {
  id          String   @id @default(uuid())
  url         String
  title       String
  description String
  image       String?
  memo        String?
  createdAt   DateTime @default(now())
}

model Superlike {
  id          String   @id @default(uuid())
  url         String
  title       String
  description String
  image       String?
  memo        String?
  createdAt   DateTime @default(now())
}
